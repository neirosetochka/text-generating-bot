import telebot
from telebot import types
from model_wrapper import ModelWrapper
import re

bot = telebot.TeleBot(your_token)
model_wrapper = ModelWrapper()
change_str = None

@bot.message_handler(commands=['start'])
def start(message):     
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –õ–∏—Å–∞ (—É–¥–∞—Ä–µ–Ω–∏–µ, –∫—Å—Ç–∞—Ç–∏, –Ω–∞ ¬´–∏¬ª), —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫—É—Ä—Å–∞ ¬´–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π NLP. –ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏¬ª –æ—Ç VK Education ‚úåüòáüò∫. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏üíï.")

@bot.message_handler(commands=['help'])
def help(message):
    help_message = """–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/start —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
/model –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
/checkmodel –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
/generate —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –≤–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã)
"""
    bot.send_message(message.from_user.id, help_message)

@bot.message_handler(commands=['model'])
def model(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('StatLM')
    btn2 = types.KeyboardButton('GPT')
    btn3 = types.KeyboardButton('Llama')
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ üëÄ", reply_markup=markup)
        
@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    
    if message.text in ['StatLM', 'GPT', 'Llama']:

        status, result = model_wrapper.load(message.text)
        if status:
            bot.send_message(message.from_user.id, "–ü–æ–¥–≥—Ä—É–∂–µ–Ω–æ")
        else:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è :(")    
    
    elif message.text in ['–ü–æ–º–µ–Ω—è—Ç—å temperature', '–ü–æ–º–µ–Ω—è—Ç—å sample_top_p']:

        bot.send_message(message.from_user.id, "–ñ–¥—É –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ :)")
        change_str = message.text.split()[1]
    
    elif re.match(r'^-?\d+(?:\.\d+)$', message.text):
        value = float(message.text)
        model_wrapper.change_kwargs(value, change_str)

    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ü–æ–º–µ–Ω—è—Ç—å temperature')
        btn2 = types.KeyboardButton('–ü–æ–º–µ–Ω—è—Ç—å sample_top_p')
        markup.add(btn1, btn2)
        status, result = model_wrapper.generate(message.text)

        if status:
            bot.send_message(message.from_user.id, result, reply_markup=markup)
        
bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
